# Copyright 2021 The Hafnium Authors.
#
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/BSD-3-Clause.

import("//build/image/image.gni")
import("//test/hftest/args.gni")

# TODO: Replace with the one from HFTEST common once all patches merge upstream
source_set("sel1_partition_base_src") {
  testonly = true

  public_configs = [
    "//src/arch/aarch64:arch_config",
    "//test/hftest:hftest_config",
  ]

  sources = [
    "secure_service.c",
  ]

  deps = [
    "//src:dlog",
    "//src:panic",
    "//src:std",
    "//src/arch/${plat_arch}:entry",
    "//src/arch/${plat_arch}/hftest:entry",
    "//src/arch/${plat_arch}/hftest:power_mgmt",
    "//test/hftest:mm",
    "//vmlib/${plat_arch}:call",
  ]
}

# Testing framework for a secondary S-EL0 partition.
source_set("sel0_partition_base_src") {
  testonly = true

  public_configs = [
    "../services:el0_partition_config",
    "..:config",
  ]

  sources = [
    "el0_secure_service.c",
  ]

  deps = [
    "../services:el0_dlog",
    "../services:el0_fdt_handler",
    "//src:panic",
    "//src/arch/${plat_arch}:entry",
    "//src/arch/${plat_arch}/hftest:el0_entry",
  ]
}

# SP that will boot first, that is required to be MP partition by hafnium today.
# This will be a S-EL1 partition and is only present to satisfy the above
# requirement, to play nice with PSCI.
vm_kernel("primary_sel1_sp") {
  testonly = true

  sources = [
    "secure_partition_service.c",
  ]

  deps = [
    ":sel1_partition_base_src",
    "//test/vmapi/common:common",
  ]
}

manifest("partition_manifest_primary_sel1_sp") {
  source = "partition_manifest_primary_sel1_sp.dts"
  output = "partition_manifest_primary_sel1_sp.dtb"
}

partition_package("primary_sel1_sp_test_package") {
  testonly = true
  files = [ [
        "partition_manifest_primary_sel1_sp.dtb",
        "primary_sel1_sp.bin",
        ":partition_manifest_primary_sel1_sp",
        ":primary_sel1_sp",
      ] ]
  output = "primary_sel1_sp_test_package.img"
}

vm_kernel("sel0_sp1") {
  testonly = true

  sources = [
    "secure_partition_service.c",
  ]
  deps = [
    ":sel0_partition_base_src",
  ]
}

manifest("partition_manifest_sel0_sp1") {
  source = "partition_manifest_sel0_sp1.dts"
  output = "partition_manifest_sel0_sp1.dtb"
}

partition_package("sel0_sp1_package") {
  testonly = true
  files = [ [
        "partition_manifest_sel0_sp1.dtb",
        "sel0_sp1.bin",
        ":partition_manifest_sel0_sp1",
        ":sel0_sp1",
      ] ]
  output = "sel0_sp1_package.img"
}

# VM that will control execution of tests in a VM-to-SP set-up
vm_kernel("vm_primary") {
  testonly = true

  sources = [
    "nwd_test_driver.c",
  ]

  deps = [
    "//test/hftest:hftest_primary_vm",
    "//test/vmapi/common:common",
  ]
}

manifest("vm_primary_manifest") {
  source = "partition-manifest-nwd-primary.dts"
  output = "partition-manifest-nwd-primary.dtb"
}

partition_package("vm_primary_test_package") {
  testonly = true
  files = [ [
        "partition-manifest-nwd-primary.dtb",
        "vm_primary.bin",
        ":vm_primary_manifest",
        ":vm_primary",
      ] ]
  output = "vm_primary_test_package.img"
}

partitions_json("el0_sp_test") {
  testonly = true

  sps = [
    [
      "primary_sel1_sp_test_package.img",
      "manifest_primary_sel1_sp.dts",
      ":primary_sel1_sp_test_package",
      ":partition_manifest_primary_sel1_sp",
    ],
    [
      "sel0_sp1_package.img",
      "manifest_sel0_sp1.dts",
      ":sel0_sp1_package",
      ":partition_manifest_sel0_sp1",
    ],
  ]

  vms = [ [
        "vm_primary_test_package.img",
        "manifest.dts",
        ":vm_primary_test_package",
        ":vm_primary_test_package",
      ] ]

  json_file = "ffa_both_world_partitions_test.json"
}
