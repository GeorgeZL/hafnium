# Copyright 2018 The Hafnium Authors.
#
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/BSD-3-Clause.

import("//build/image/image.gni")
import("//test/hftest/args.gni")

config("config") {
  include_dirs = [ "inc" ]
}

# Tests with secondary VMs.
vm_kernel("primary_with_secondaries_no_fdt_vm") {
  testonly = true
  public_configs = [
    ":config",
    "//src/arch/aarch64:config",
  ]

  sources = [
    "no_fdt.c",
  ]

  deps = [
    "//src/arch/aarch64/hftest:registers",
    "//test/hftest:hftest_primary_vm",
    "//test/vmapi/common",
    "//vmlib",
  ]
}

vm_kernel("secondary_vm_no_fdt") {
  testonly = true

  sources = [
    "no_fdt_secondary.c",
  ]

  deps = [
    "//test/hftest:hftest_secondary_vm_no_fdt",
  ]
}

manifest("primary_with_secondaries_no_fdt_manifest") {
  source = "manifest_no_fdt.dts"
  output = "manifest_no_fdt.dtb"
  overlay = hftest_manifest_overlay
}

initrd("primary_with_secondaries_no_fdt") {
  testonly = true

  files = [
    [
      "manifest.dtb",
      ":primary_with_secondaries_no_fdt_manifest",
      "manifest_no_fdt.dtb",
    ],
    [
      "primary_with_secondaries_no_fdt",
      ":primary_with_secondaries_no_fdt_vm",
      "primary_with_secondaries_no_fdt_vm.bin",
    ],
    [
      "secondary_vm_no_fdt",
      ":secondary_vm_no_fdt",
      "secondary_vm_no_fdt.bin",
    ],
  ]
}

vm_kernel("primary_with_secondaries_test_vm") {
  testonly = true
  public_configs = [
    ":config",
    "//src/arch/aarch64:config",
  ]

  sources = [
    "boot.c",
    "debug_el1.c",
    "ffa.c",
    "floating_point.c",
    "indirect_messaging.c",
    "interrupts.c",
    "mailbox_common.c",
    "memory_sharing.c",
    "no_services.c",
    "perfmon.c",
    "run_race.c",
    "smp.c",
    "sysregs.c",
    "unmapped.c",
  ]

  deps = [
    "//src/arch/aarch64/hftest:registers",
    "//test/hftest:hftest_primary_vm",
    "//test/vmapi/common",
    "//vmlib",
  ]
}

manifest("primary_with_secondaries_test_manifest") {
  source = "manifest.dts"
  output = "manifest.dtb"
  overlay = hftest_manifest_overlay
}

device_tree("service1_dtb") {
  source = "service1.dts"
  output = "$target_out_dir/service1.dtb"
}

device_tree("service2_dtb") {
  source = "service2.dts"
  output = "$target_out_dir/service2.dtb"
}

device_tree("service3_dtb") {
  source = "service3.dts"
  output = "$target_out_dir/service3.dtb"
}

initrd("primary_with_secondaries_test") {
  testonly = true

  files = [
    [
      "manifest.dtb",
      ":primary_with_secondaries_test_manifest",
      "manifest.dtb",
    ],
    [
      "primary_with_secondaries_test",
      ":primary_with_secondaries_test_vm",
      "primary_with_secondaries_test_vm.bin",
    ],
    [
      "services1",
      "services:service_vm1",
      "service_vm1.bin",
    ],
    [
      "services2",
      "services:service_vm2",
      "service_vm2.bin",
    ],
    [
      "services3",
      "services:service_vm3",
      "service_vm3.bin",
    ],
    [
      "service1.dtb",
      ":service1_dtb",
      "service1.dtb",
    ],
    [
      "service2.dtb",
      ":service2_dtb",
      "service2.dtb",
    ],
    [
      "service3.dtb",
      ":service3_dtb",
      "service3.dtb",
    ],
  ]
}
